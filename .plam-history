:q
s k i
k i
s k
(\i. i)
s k i
let i = (\x. x)
let k = (\x y. x)
s
let s = (\x y z. x z (y z))
:run_test
s
let s = (\s.s)
:q
let ident = (\s . s)
let
let s = (\x y z. x z (y z))
:q
let s_comb = (\x. x)
let s = (\x.x)
let
let S = (\x y z. x z (y z))
:q
[1, 2]
\x.\y.x
:q
s i
i
i = \x . x
s
s = \x y z. x z (y z)
:q
(\x y z. x z (y z)) (\x. x)
s (\x.x)
s
i s
s i
i = \x.x
s
s = \x y z. x z (y z)
:q
[s, i]
s (\x. x)
s i
i
s i
(\i.i) (\x.x)
\i.i (\x.x)
\i.i
i = \x.x
s
s = \x y z. x z (y z)
s
s = \x. x x
s = \x. x
s = \x.x
s = \xyz. x z (y z)
:q
\x.(\y.(\z. x z (y z)))
\x.(\y.x)
:q
\x.(\y.x)
\x.\y.x
:q
\x.\y.x
\x. x
(\x. (\y. x))
(
\x. x
\x.x
ls
:q
\x. (\y.x)
\x.(\y.x)
(\x.(\y.x))
(\x.\y.x)
(\x.(\y.x))
ls
:q
(\x.(\y.x))
:q
(\x . (\y.x))
(\x.(\y.x))
(\x.x)
:q
(\x.(\y.x))
:q
(\x.(\y.x))
:q
(\x.(\y.x))
\x.\y.x
(\y.x)
(\x.(\y.x))
(\x.\y.x)
:q
k = (\x.\y.x)
(\x.(\y.x))
(\x.\y.x)
:q
(\x. (\y. x))
